Aggregation using MongoDB
------

test> show dbs
Titanic_data  132.00 KiB
admin          40.00 KiB
config        108.00 KiB
local          40.00 KiB
test> use Titanic_data
switched to db Titanic_data
Titanic_data> db.Titanic_data.find()


***************************************************************************************************
1) Retrieves documents where the "age" field has a value greater than or equal to 35.

Titanic_data> db.Titanic_data.find(
... {age:{$gte:35}}
... );

***************************************************************************************************
2) Retrieve documents where the value of the "sex" field is exactly equal to "male".

Titanic_data> db.Titanic_data.find( { sex: { $eq: "male" } } );

***************************************************************************************************
3) Retrieve documents where the value of the "age" field is not equal to 30.

Titanic_data> db.Titanic_data.find( { age: { $ne: 30 } } );

***************************************************************************************************
4) Retrieve documents where the value of the "name" field is exactly equal to 'Behr, Mr. Karl Howell'.

Titanic_data> db.Titanic_data.find( { name: { $eq: 'Behr, Mr. Karl Howell' } } );

***************************************************************************************************
5) Retrieve documents where both conditions are satisfied:
"pclass": 1: 
"sex": "female".

Titanic_data> db.titanic.find({
...     $and: [
...         { "pclass": 1 },
...         { "sex": "female" }
...     ]
... })

Titanic_data> db.Titanic_data.find({ $and: [{ "pclass" : 1}, {"sex" : "female"}] });

***************************************************************************************************
6) Retrieve documents where the age field is not less than 18 years.

Titanic_data> db.Titanic_data.find({"age": {$not: {$lt: 18}}});

***************************************************************************************************
7) Retrieve documents where both conditions are met:
"age" : {$lte: 50}
"sex" :"female"

Titanic_data> db.Titanic_data.find({ $and: [{ "age" : {$lte: 50}}, {"sex" :"female"}] });

***************************************************************************************************
8) Retrieve documents where both conditions are met:
"survived" : 1
"sex" :"male"

Titanic_data> db.Titanic_data.find({ $and: [{ "survived" : 1}, {"sex" : "male"}] });

***************************************************************************************************
9) Retrieve documents where the "cabin" field exists.

Titanic_data> db.Titanic_data.find({ "cabin": { $exists: true } });

***************************************************************************************************
10) Retrieve documents where the "pclass" field has a value that is either 1 or 2.

Titanic_data> db.Titanic_data.find({ "pclass": { $in: [1, 2] } });

***************************************************************************************************
11) Retrieve documents where the "pclass" field has a value that is not in the array [1, 2].

Titanic_data> db.Titanic_data.find({ "pclass": { $nin: [1, 2] } });

***************************************************************************************************

Titanic_data> db.Titanic_data.find({ "sex": { $elemMatch: {"age": {$gte:50}} } });

Titanic_data>
